#summary One-sentence summary of this page.

= Combat Management Logic =

Combat in UAlbertaBot is handled within `CombatCommander`:

  * `CombatCommander.update()`
    * Set a worker to scout if it is the appropriate time
    * If any of our occupied regions contain enemy units, create defense Squad to defend
    * If additional combat units are available, attack as follows:
      * If we know of a visible enemy base location, attack it
      * Otherwise, if we see visible units, attack them
      * Otherwise, if we know where an enemy building was, attack it
      * Otherwise, explore until we find a new attack target
    * `Squads.update()` - perform squad commands
      * Perform `CombatSimulation`
        * If simulation returns victory
          * Continue attacking toward current target
          * Call associated `MicroManager` sub-class for each unit type
        * If simulation returns defeat
          * Retreat Squad toward own base

= Squad Formation & Implementation =

In the above example we see that `Squad` objects are created. A `Squad` is an object which holds the following information:

{{{
class Squad
{
    SquadOrder         order;                  // the order to be carried out 
    UnitVector         units;                  // the units in this squad

    MeleeManager       meleeManager;           // manager for melee units in this squad
    RangedManager      rangedManager;          // manager for ranged units in this squad
    DetectorManager    detectorManager;        // manager for detector units in this squad
    TransportManager   transportManager;       // manager for transport units in this squad

    std::map<BWAPI::Unit *, bool>   nearEnemy; // whether or not a given unit is near an enemy unit
};
}}}

With a `SquadOrder` consisting of

{{{
class SquadOrder
{
    enum { None, Attack, Defend, Regroup, SquadOrderTypes };

    int                type;       // type of order, from enum above
    int                radius;     // the radius of action for this order
    BWAPI::Position    position;   // the position where this order is to be carried out
};
}}}
#summary Design & Structure of the bot

= UAlbertaBot Architecture =

http://webdocs.cs.ualberta.ca/~cdavid/ualbertabot.png

== Motivation ==

UAlbertaBot was designed to have an intuitive hierarchical structure based on proven military command systems. This structure is beneficial for several reasons:
  * Intuitive classes for ease of interpretation
    * ex: `ProductionManager` handles every task related to production of buildingd and units
  * Modular design allows for easy modifications and updates over time
    * ex: To change unit micro behaviour simply replace the `MicroManager` sub-classes
  * Vertical communication reduces code complexity
    * ex: Only `CombatCommander` can talk to `Squad`, passing it orders
  * Information is on a need-to-know basis, reducing data transfer between modules
    * ex: Only `WorkerManager` knows which workers are assigned to which jobs
  * Vertical structure avoids code duplication

== Global Communication ==

There are a few cases of global communication in UAlberaBot, which are implemented via `Singleton` classes. Computationally expensive tasks such as path finding and strategy logic are performed inside these classes, and the results are then made globally available. These classes are:
  * `InformationManager`
    * Computes and stores important information about units which each other manager may want access to (ie: determine if opponent has a detector)
  * `MapTools`
    * Performs ground-distance path finding and caches results for later retrieval
  * `MapGrid` 
    * Performs efficient nearest-neighbour calculations as well as stores information relating to when an area of the map was last visited
  * `StrategyManager` 
    * Makes decisions about build-order goals, when to expand, and other game policies

== Artificial Intelligence ==

UAlbertaBot contains a mix of dynamic artificial intelligence solutions and script-based decision making. Here I will give an overview of each main function of the bot and how it is performed.

  * === (AI) Build-order Planning ===
    * All build-orders in UAlbertaBot are planned by our heuristic search based [StarcraftBuildOrderSearch build order planning system]. Build-order goals are given by `StrategyManager` to `ProductionManager` which then uses this system to dynamically generate near-optimal build order plans. The only two exceptions to this rule are:
      * A supply producer is build immediately if a supply defficiency is detected
      * A detector is made if enemy cloaked units are detected
  * === (AI) Combat Simulation ===
    * All battles UAlbertaBot encounters are first run through our [AdversarialSearch combat simulation system]. If the outcome of this simulation is positive we continue toward the enmy base. If the outcome is negative, we retreat toward our own base.
  * === (AI) Multi-Unit Path Finding ===
    * A flood-fill based multi-agent path finding system is used to determine all ground paths to a given destination on a given map. The results of these are cached efficiently for later re-use if necessary.
  * === (AI) Strategy Selection ===
    * UAlbertaBot uses the UCB algorithm for selecting a strategy to use against a given opponent, based on the results of previous matches. If no match history is available, we use a random selection from given strategies.
  * === (Script) Unit Micromanagement ===
    * Currently, all unit micromanagement follows a rule-based scripted policy found in its respective `MicroManager` subclass. We hope to soon extend this to use our full [AdversarialSearch alpha-beta based micro controller].
#summary Design & Structure of the bot

= UAlbertaBot Architecture =

http://webdocs.cs.ualberta.ca/~cdavid/ualbertabot.png

== Motivation ==

UAlbertaBot was designed to have an intuitive hierarchical structure based on proven military command systems. This structure is beneficial for several reasons:
  * Intuitive classes for ease of interpretation
    * ex: `ProductionManager` handles every task related to production of buildingd and units
  * Modular design allows for easy modifications and updates over time
    * ex: To change unit micro behaviour simply replace the `MicroManager` sub-classes
  * Vertical communication reduces code complexity
    * ex: Only `CombatCommander` can talk to `Squad`, passing it orders
  * Information is on a need-to-know basis, reducing data transfer between modules
    * ex: Only `WorkerManager` knows which workers are assigned to which jobs
  * Vertical structure avoids code duplication

== Global Communication ==

There are a few cases of global communication in UAlberaBot, which are implemented via `Singleton` classes. Computationally expensive tasks such as path finding and strategy logic are performed inside these classes, and the results are then made globally available. These classes are:
  * `InformationManager`
    * Computes and stores important information about units which each other manager may want access to (ie: determine if opponent has a detector)
  * `MapTools`
    * Performs ground-distance path finding and caches results for later retrieval
  * `MapGrid` 
    * Performs efficient nearest-neighbour calculations as well as stores information relating to when an area of the map was last visited
  * `StrategyManager` 
    * Makes decisions about build-order goals, when to expand, and other game policies

== [http://code.google.com/p/ualbertabot/source/browse/trunk/UAlbertaBot/Source/UAlbertaBotModule.cpp UAlbertaBotModule] ==

  * Main .dll module of UAlbertaBot
  * Inherits from AIModule 
  * Loads `Option`s and initializes `GameCommander`
  * `UAlbertaBot.onFrame()` directly calls `GameCommander.update()`

== [http://code.google.com/p/ualbertabot/source/browse/trunk/UAlbertaBot/Source/Options.cpp Options] ==

The Options namespace stores various parameters to be used throughout the code.

== GameCommander ==